// Generated by CoffeeScript 1.6.1
(function() {
  var FileResponse, Site, build, build_static, call_route_fn, concat, escapeRegExp, extract_parameters, filter, find_route, fs, indexOf, map, namedParam, optionalParam, path, println, push, route, route_to_RegExp, slice, splatParam, toString, util, validate_site, wrench, write_file;

  fs = require("fs");

  util = require("util");

  path = require("path");

  println = console.log;

  map = Array.prototype.map;

  filter = Array.prototype.filter;

  indexOf = Array.prototype.indexOf;

  concat = Array.prototype.concat;

  slice = Array.prototype.slice;

  toString = Object.prototype.toString;

  push = Array.prototype.push;

  var type = {}; type["isArray"] = Array.prototype.isArray || function(obj) { return Object.prototype.toString.call(obj) == '[object Array]'; }; type["isObject"] = function(obj) { return obj === Object(obj); }; ['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'].map(function(name) { type["is" + name] = function(obj) { return toString.call(obj) == '[object ' + name + ']'; }; });;

  wrench = require("wrench");

  validate_site = function(obj) {
    if (!type.isObject(obj) || !obj.build_path) {
      throw new Error("Object site did not validate.");
    }
  };

  extract_parameters = function(route, inroute) {
    if (!type.isRegExp(route)) {
      throw new Error("String route required");
    }
    if (!type.isString(inroute)) {
      throw new Error("String inroute required");
    }
    return slice.call(route.exec(inroute), 1);
  };

  optionalParam = /\((.*?)\)/g;

  namedParam = /(\(\?)?:\w+/g;

  splatParam = /\*\w+/g;

  escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  route_to_RegExp = function(route) {
    route = route.replace(escapeRegExp, '\\$&').replace(optionalParam, '(?:$1)?').replace(namedParam, function(match, optional) {
      if (optional) {
        return match;
      } else {
        return '([^\/]+)';
      }
    }).replace(splatParam, '(.*?)');
    return new RegExp('^' + route + '$');
  };

  route = function(route, fn) {
    var site;
    site = this;
    if (!type.isFunction(fn)) {
      throw new Error("hello");
    }
    if (type.isString(route)) {
      route = route_to_RegExp(route);
    }
    push.call(site.routes, {
      route: route,
      fn: fn
    });
    return site;
  };

  find_route = function(site, inroute) {
    var obj, _i, _len, _ref;
    validate_site(site);
    if (!type.isString(inroute)) {
      throw new Error("String inroute required");
    }
    _ref = site.routes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      obj = _ref[_i];
      if (obj.route.exec(inroute)) {
        return obj;
      }
    }
    throw new Error("Route not found");
  };

  call_route_fn = function(site, inroute) {
    var args, route_obj;
    validate_site(site);
    if (!type.isString(inroute)) {
      throw new Error("String site required");
    }
    route_obj = find_route(site, inroute);
    args = concat.call([FileResponse.create(site, inroute)], extract_parameters(route_obj.route, inroute));
    return route_obj.fn.apply(site, args);
  };

  write_file = function(outfile, data) {
    var dirname;
    if (!type.isString(outfile)) {
      throw new Error("String outfile required");
    }
    dirname = path.dirname(outfile);
    wrench.mkdirSyncRecursive(dirname, 0x1ff);
    return fs.writeFileSync(outfile, data);
  };

  /*
  Returns site instance, builds inroute, calls route function, file is written with response object
  
  {String or Array} inroute: route or routes to build
  
  Example:
    mysite.build(["page/one.html", "page/two.html", "page/three.html"])
    mysite.build("page/one.html")
  */


  build = function(route_or_routes) {
    var site;
    site = this;
    if (!type.isString(route_or_routes)) {
      if (!type.isArray(route_or_routes)) {
        throw new Error("Route or Routes required.");
      }
    }
    if (type.isArray(route_or_routes)) {
      return (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = route_or_routes.length; _i < _len; _i++) {
          route = route_or_routes[_i];
          _results.push(call_route_fn(site, route));
        }
        return _results;
      })();
    }
    call_route_fn(site, route_or_routes);
    return site;
  };

  /*
  Returns site instance, builds static directory
  
  Example:
    mysite.build_static()
  */


  build_static = function() {
    var site;
    site = this;
    if (!site.static_path) {
      return;
    }
    wrench.copyDirSyncRecursive(site.static_path, path.join(site.build_path, "/static"));
    return site;
  };

  /*
  Site Type
  
  {Object} obj:  
    * {String} build_path: where files build (save) to.  
    * {String} static_path: static path for static files to be copied over with build_static().  
    * {Fn} constructor
    
  Example:
  Site.create({
    build_path: "build",
    
    constructor: function() {
      this.route("page/:name", this.page);
    },
    
    page: function(file, name) {
      file.write("Page " + name);
    },
    
  })
  */


  Site = function(obj) {
    var key, _i, _len, _ref;
    validate_site(obj);
    this.routes = [];
    _ref = Object.keys(obj);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      this[key] = obj[key];
    }
    this.constructor.apply(this, arguments);
    return this;
  };

  Site.prototype = {
    route: route,
    build: build,
    build_static: build_static,
    constructor: function() {}
  };

  Site.create = function(site) {
    return new Site(site);
  };

  /*
  FileResponse Type
  Passed to the route function to write async to the build file
  
  {String} path: filepath to write to.
  {Fn} write
  
  Example:
  route_fn: function(file) {
    file.write(data);
    file.path;
  }
  */


  FileResponse = function(site, inroute) {
    validate_site(site);
    if (!type.isString(inroute)) {
      throw new Error("String inroute required");
    }
    this.path = path.join(site.build_path, inroute);
    return this;
  };

  FileResponse.prototype = {
    write: function(data) {
      var file_type;
      file_type = this;
      return write_file(file_type.path, data);
    }
  };

  FileResponse.create = function(site, inroute) {
    return new FileResponse(site, inroute);
  };

  module.exports.validate_site = validate_site;

  module.exports.extract_parameters = extract_parameters;

  module.exports.route_to_RegExp = route_to_RegExp;

  module.exports.route = route;

  module.exports.find_route = find_route;

  module.exports.call_route_fn = call_route_fn;

  module.exports.write_file = write_file;

  module.exports.build = build;

  module.exports.build_static = build_static;

  module.exports.Site = Site;

  module.exports.FileResponse = FileResponse;

}).call(this);
