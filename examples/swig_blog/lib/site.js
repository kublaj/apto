// Generated by CoffeeScript 1.4.0
(function() {
  var apto, concat, express, filter, fs, get_posts, indexOf, make_post_template_data, map, parse_post, path, println, site, sort, swig;

  fs = require("fs");

  path = require("path");

  println = console.log;

  concat = Array.prototype.concat;

  map = Array.prototype.map;

  filter = Array.prototype.filter;

  sort = Array.prototype.sort;

  indexOf = Array.prototype.indexOf;

  swig = require("swig");

  express = require('express');

  apto = require("apto");

  swig.init({
    cache: false,
    root: "."
  });

  parse_post = function(filename) {
    var author, body, date, file, filepath, title;
    filepath = path.join("post/", filename);
    file = fs.readFileSync(filepath).toString();
    try {
      title = /{%.*?block.*?title.*?%}([\s\S]*?){%.*?endblock.*?%}/m.exec(file)[1].trim();
      author = /{%.*?block.*author.*?%}([\s\S]*?){%.*?endblock.*?%}/m.exec(file)[1].trim();
      date = /{%.*?block.*?date.*?%}([\s\S]*?){%.*?endblock.*?%}/m.exec(file)[1].trim();
      body = /{%.*?block.*?body.*?%}([\s\S]*?){%.*?endblock.*?%}/m.exec(file)[1].trim();
      return {
        path: filepath,
        title: title,
        author: author,
        date: date,
        body: body
      };
    } catch (e) {
      return void 0;
    }
  };

  get_posts = function() {
    var filenames, filtered_posts, posts, reversed_sorted_posts;
    filenames = apto.util.listfilesSync("post", {
      recur: true
    });
    posts = map.call(filenames, function(filename) {
      return parse_post(filename);
    });
    filtered_posts = filter.call(posts, function(post) {
      return post != null;
    });
    reversed_sorted_posts = sort.call(posts, function(a, b) {
      if (a.date < b.date) {
        return 1;
      }
      if (a.date > b.date) {
        return -1;
      }
      return 0;
    });
    return reversed_sorted_posts;
  };

  make_post_template_data = function(route) {
    var post_index, template_data;
    try {
      template_data = {
        posts: get_posts()
      };
      post_index = indexOf.call(template_data.posts, filter.call(template_data.posts, function(post) {
        return route === post.path;
      })[0]);
      if (post_index !== 0) {
        template_data.previous_post = template_data.posts[post_index - 1];
      }
      if (post_index !== template_data.posts.length - 1) {
        template_data.next_post = template_data.posts[post_index + 1];
      }
      return template_data;
    } catch (_error) {}
    return void 0;
  };

  site = apto.Site.create({
    build_path: "build",
    static_path: "static",
    constructor: function() {
      this.route("post/:name", this.post);
      return this.route(":page", this.page);
    },
    post: function(file, name) {
      var filename, template_data;
      filename = path.join("post/", name);
      template_data = make_post_template_data(filename);
      return file.write(swig.compileFile(filename).render(template_data));
    },
    page: function(file, page) {
      var template_data;
      template_data = {
        posts: get_posts(),
        pages: apto.util.listfilesSync("page", {
          recur: true
        })
      };
      return file.write(swig.compileFile(path.join("page/", page)).render(template_data));
    },
    buildall: function() {
      var p, pages, posts, site_pages;
      pages = apto.util.listfilesSync("page", {
        recur: true
      });
      posts = (function() {
        var _i, _len, _ref, _results;
        _ref = apto.util.listfilesSync("post", {
          recur: true
        });
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          _results.push(path.join("post/", p));
        }
        return _results;
      })();
      site_pages = concat.call(pages, posts);
      site.build(site_pages);
      return site.build_static();
    }
  });

  module.exports.main = function() {
    var command, option1, port;
    command = process.argv[2];
    option1 = process.argv[3];
    switch (command) {
      case "build":
        return site.buildall();
      case "serve":
        port = option1 || 8000;
        console.log("development server started at localhost: " + port);
        site.buildall();
        apto.util.watch(["page", "post", "static", "layout"], function(filename) {
          return site.buildall();
        });
        return express().use(express["static"](site.build_path)).listen(port);
      default:
        return console.log("\n  Usage: site [server|build]\n\n    serve  <port>   Start an development server, auto reloads changes for you.\n    build           Build site.\n\n");
    }
  };

}).call(this);
